---
version: "3.8"

services:
  postgresql:
    image: postgres:12-alpine
    container_name: postgresql
    hostname: postgresql
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${PG_PASS:?database password required}
      - POSTGRES_USER=${PG_USER:-authentik}
      - POSTGRES_DB=${PG_DB:-authentik}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - /share/CACHEDEV1_DATA/Container/authentik/postgresql:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - proxy_network
    labels:
      - com.centurylinklabs.watchtower.enable=true

  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - /share/CACHEDEV1_DATA/Container/authentik/redis:/data
      - /etc/localtime:/etc/localtime:ro
    networks:
      - proxy_network
    labels:
      - com.centurylinklabs.watchtower.enable=true

  server:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik_server
    hostname: authentik_server
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: server
    env_file:
      - .env
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__USER=${PG_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_PASS}
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    volumes:
      - /share/CACHEDEV1_DATA/Container/authentik/media:/media
      - /share/CACHEDEV1_DATA/Container/authentik/custom-templates:/templates
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgresql
      - redis
    networks:
      - proxy_network      
    labels:
      - com.centurylinklabs.watchtower.enable=true

  worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik_worker
    hostname: authentik_worker
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: worker
    env_file:
      - .env
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=postgresql
      - AUTHENTIK_POSTGRESQL__USER=${PG_USER:-authentik}
      - AUTHENTIK_POSTGRESQL__NAME=${PG_DB:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /share/CACHEDEV1_DATA/Container/authentik/media:/media
      - /share/CACHEDEV1_DATA/Container/authentik/certs:/certs
      - /share/CACHEDEV1_DATA/Container/authentik/custom-templates:/templates
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgresql
      - redis
    networks:
      - proxy_network
    labels:
      - com.centurylinklabs.watchtower.enable=true
      
networks:
  proxy_network:
    name: proxy_network
    external: true
